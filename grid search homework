rm(list=ls())
par(mfrow=c(1,3))
a.vec = c()
#data
y.vec = c(1,2,3,4,5,6,12)

##################################Least square loss
f.fun = function(y.vec,mu){
  t(y.vec-mu)%*%(y.vec-mu)
}

#plot
a = -10; b = 10; n = 100; iter = 1e+3 ;eps = 1e-7
mu.vec = seq(a,b,length.out = n)
f.vec = rep(NA,n)

for(i in 1:n){
  f.vec[i] = f.fun(y.vec,mu.vec[i])
}

plot(mu.vec,f.vec)

#grid search
a = -20; b = 20; n = 100; iter = 1e+3 ;eps = 1e-7
mu.vec = seq(a,b,length.out = n)
f.vec = rep(NA,n)
tr.vec = c()
for(j in 1:iter){
  print(j)
  tr.vec = append(tr.vec,f.fun(y.vec,a)) #trace
  mu.vec = seq(a,b,length.out = n)
  for(i in 1:n){
    f.vec[i] = f.fun(y.vec,mu.vec[i])
  }
  opt = which.min(f.vec)
  a = mu.vec[opt-1]
  b = mu.vec[opt+1]
  
  if(b-a<eps) break
}

a.vec = c(a.vec,a)


##############################Absolute deviation loss
f.fun = function(y.vec,mu){
  t(abs(y.vec-mu))%*%rep(1,length(y.vec))
}



#plot
a = -10; b = 10; n = 100; iter = 1e+3 ;eps = 1e-7
mu.vec = seq(a,b,length.out = n)
f.vec = rep(NA,n)

for(i in 1:n){
  f.vec[i] = f.fun(y.vec,mu.vec[i])
}

plot(mu.vec,f.vec)

#grid search
a = -20; b = 20; n = 100; iter = 1e+3 ;eps = 1e-7
mu.vec = seq(a,b,length.out = n)
f.vec = rep(NA,n)
tr.vec = c()
for(j in 1:iter){
  print(j)
  tr.vec = append(tr.vec,f.fun(y.vec,a)) #trace
  mu.vec = seq(a,b,length.out = n)
  for(i in 1:n){
    f.vec[i] = f.fun(y.vec,mu.vec[i])
  }
  opt = which.min(f.vec)
  a = mu.vec[opt-1]
  b = mu.vec[opt+1]
  
  if(b-a<eps) break
}
a.vec = c(a.vec,a)
############################################################
#LASSO
#data
y.vec = c(1,2,3,4,5,6,12)
lambda = 0.1

f.fun = function(y.vec,mu,lambda){
  t(y.vec-mu)%*%(y.vec-mu)+lambda*abs(mu)
}

#plot
a = -10; b = 10; n = 100; iter = 1e+3 ;eps = 1e-7
mu.vec = seq(a,b,length.out = n)
f.vec = rep(NA,n)

for(i in 1:n){
  f.vec[i] = f.fun(y.vec,mu.vec[i],lambda)
}

plot(mu.vec,f.vec)

#grid search
a = -20; b = 20; n = 100; iter = 1e+3 ;eps = 1e-7
mu.vec = seq(a,b,length.out = n)
f.vec = rep(NA,n)
tr.vec = c()
for(j in 1:iter){
  print(j)
  tr.vec = append(tr.vec,f.fun(y.vec,a,lambda)) #trace
  mu.vec = seq(a,b,length.out = n)
  for(i in 1:n){
    f.vec[i] = f.fun(y.vec,mu.vec[i],lambda)
  }
  opt = which.min(f.vec)
  a = mu.vec[opt-1]
  b = mu.vec[opt+1]
  
  if(b-a<eps) break
}
a.vec = c(a.vec,a)
names(a.vec) = c("LS","AB","LA")
a.vec
mean(y.vec)
median(y.vec)
